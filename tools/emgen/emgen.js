var config = require("./config.json");
var fs = require("fs");

var headers = {
    node: new Buffer(
        "\n\n" +
        "/*-------------------------------------------------------------*\n" +
        " * THIS FILE IS AUTO-GENERATED BY EMGEN, DO NOT COMMIT OR EDIT *\n" +
        " *-------------------------------------------------------------*/\n\n" +
        "" +
        "var messages = {};\n\n"
    ),

    web: new Buffer(
        ""
    )
}

var generation = {};
for( var key in config.projects ) 
{
    var project = config.projects[key];
    var file = __dirname + "/../../" + project.path + "/generated_messages_" + key + ".js";
    
    var file = fs.openSync(file, 'w');
    
    var code = fs.openSync(__dirname + "/emgen-" + project.type + ".js", 'r');
    var read = new Buffer(1024);
    var bytes = 0;
    while(bytes = fs.readSync(code, read, 0, read.length))
    {
        fs.writeSync(file, read, 0, bytes);
    }
    fs.closeSync(code);

    if(project.type === "node")
    {
        fs.writeSync(file, headers[project.type], 0, headers[project.type].length);
    }

    project.file = file;
    project.name = key;
}

function write(project, text) {
    var buffer = new Buffer(text);
    fs.writeSync(config.projects[project].file, buffer, 0, buffer.length);
}

var storedMessages = {};
var forcedId = -1;
var id = 0;

config.files.forEach(function(file){
    var messages = require(__dirname + "/../../" + file);
    
    for( var key in messages )
    {
        var message = messages[key];

        storedMessages[key] = message;

        if( message.forcedId !== undefined && forcedId < message.forcedId )
        {
            forcedId = message.forcedId;
        }
    }
});

id = forcedId + 1;

for( var key in storedMessages )
{
    var message = storedMessages[key];
    message.id = message.forcedId !== undefined ? message.forcedId : id++;

    var projects = {};

    message.packers.forEach(function(packer){
        if( config.projects[packer] )
        {
            projects[packer] = {
                pack: true,
                unpack: false
            };
        }
        else if( config.groups[packer] )
        {
            config.groups[packer].forEach(function(project){
                projects[project] = {
                    pack: true,
                    unpack: false
                };
            });
        }
    });

    message.unpackers.forEach(function(unpacker){
        if( config.projects[unpacker] )
        {
            if( projects[unpacker] )
            {
                projects[unpacker].unpack = true;
            }
            else
            {
                projects[unpacker] = {
                    pack: false,
                    unpack: true
                };
            }
        }
        else if( config.groups[unpacker] )
        {
            config.groups[unpacker].forEach(function(project){
                if( projects[project] )
                {
                    projects[project].unpack = true;
                }
                else
                {
                    projects[project] = {
                        pack: false,
                        unpack: true
                    };
                }
            });
        }
    });

    for( var name in projects ) 
    {
        var project = config.projects[name];
        var projectFlags = projects[name];
        var buffer = null;

        var padding = " " + key;
        while( padding.length < 51 )
        {
            padding = "-" + padding;
        }

        if( project.type == "node" )
        {
            write(
                name,
                "/* START - " + padding + " */\n"
            );

            write(
                name,
                "messages." + key + " = function() {\n"
            );

            for( var property in message.properties )
            {
                write(
                    name,
                    "\tthis." + property + " = null;\n"
                );
            }

            write(
                name,
                "};\n\n"
            );

            write(
                name,
                "messages." + key + ".prototype.id = " + message.id + ";\n\n"
            );
        }

        if( projectFlags.pack )
        {
            if( project.type == "node" )
            {
                write(
                    name,
                    "messages." + key + ".prototype.pack = function() {\n"
                );

                for( var property in message.properties )
                {
                    write(
                        name,
                        "\tif(this." + property + " === null) throw new Error(\"Incomplete message '" + key + "' is missing property '" + property + "'.\");\n"
                    );
                }

                write(
                    name, 
                    "\n" +
                    "\tvar buffer = getBuffer();\n"
                );

                var offset = 0;
                for( var property in message.properties )
                {
                    switch(message.properties[property])
                    {
                        case "int64":
                            write(name, "\tbuffer.writeInt32BE(this." + property + " >> 32, " + offset + ", true);\n");
                            offset += 4;
                            write(name, "\tbuffer.writeInt32BE(this." + property + " & 0xFFFFFFFF, " + offset + ", true);\n");
                            offset += 4;
                            break;

                        case "int32":
                            write(name, "\tbuffer.writeInt32BE(this." + property + ", " + offset + ", true);\n");
                            offset += 4;
                            break;

                        case "int16":
                            write(name, "\tbuffer.writeInt16BE(this." + property + ", " + offset + ", true);\n");
                            offset += 2;
                            break;

                        case "int8":
                            write(name, "\tbuffer.writeInt8(this." + property + ", " + offset + ", true);\n");
                            offset += 1;
                            break;

                        case "uint64":
                            write(name, "\tbuffer.writeUInt32BE(this." + property + " >> 32, " + offset + ", true);\n");
                            offset += 4;
                            write(name, "\tbuffer.writeUInt32BE(this." + property + " & 0xFFFFFFFF, " + offset + ", true);\n");
                            offset += 4;
                            break;

                        case "uint32":
                            write(name, "\tbuffer.writeUInt32BE(this." + property + ", " + offset + ", true);\n");
                            offset += 4;
                            break;

                        case "uint16":
                            write(name, "\tbuffer.writeUInt16BE(this." + property + ", " + offset + ", true);\n");
                            offset += 2;
                            break;

                        case "uint8":
                            write(name, "\tbuffer.writeUInt8(this." + property + ", " + offset + ", true);\n");
                            offset += 1;
                            break;

                        case "bool":
                            break;

                        default:
                            throw new Error("Unsupported type: '" + message.properties[property]);
                    }
                }

                write(
                    name,
                    "};\n\n"
                );
            }
        }

        if( projectFlags.unpack )
        {
            if( project.type == "node" )
            {
                write(
                    name,
                    "messages." + key + ".prototype.unpack = function(buffer) {\n" +
                    "};\n"
                );
            }
        }

        if( project.type == "node" )
        {
            write(
                name,
                "/* END --- " + padding + " */\n\n"
            );
        }
    }
}

for( var key in config.projects ) 
{
    var project = config.projects[key];

    if( project.type === "node" )
    {
        write(key, "module.exports = messages;");
    }

    fs.closeSync(project.file);
}